\begin{thebibliography}{10}

\bibitem{dut}
T.~D. LaToza and B.~A. Myers, ``Designing {Useful} {Tools} for {Developers},''
  in {\em PLATEAU}, pp.~45--50, 2011.

\bibitem{Sutter}
H.~Sutter and J.~R. Larus, ``Software and the {Concurrency} {Revolution},''
  {\em ACM Queue}, vol.~3, no.~7, pp.~54--62, 2005.

\bibitem{lev}
N.~G. Leveson and C.~S. Turner, ``Investigation of the {Therac-25}
  {Accidents},'' {\em IEEE Computer}, vol.~26, no.~7, pp.~18--41, 1993.

\bibitem{Coff}
E.~G.~C. Jr., M.~J. Elphick, and A.~Shoshani, ``System {Deadlocks},'' {\em ACM
  Comput. Surv.}, vol.~3, no.~2, pp.~67--78, 1971.

\bibitem{KLEE}
C.~Cadar, D.~Dunbar, and D.~R. Engler, ``{KLEE}: {Unassisted} and {Automatic}
  {Generation} of {High-Coverage} {Tests} for {Complex} {Systems} {Programs},''
  in {\em OSDI}, pp.~209--224, 2008.

\bibitem{Pt}
P.~Thomson, ``Kleerace: Algorithms and {Heuristics} for {Scalable}
  {Data-dependent} {Race} {Detection} using {Symbolic} {Execution},'' Master's
  thesis, University of Oxford, Oxford, United Kingdom, 2011.

\bibitem{Savage}
S.~Savage, M.~Burrows, G.~Nelson, P.~Sobalvarro, and T.~E. Anderson, ``Eraser:
  {A} {Dynamic} {Data} {Race} {Detector} for {Multi-Threaded} {Programs},'' in
  {\em SOSP}, pp.~27--37, 1997.

\bibitem{Lamport}
L.~Lamport, ``Time, {Clocks}, and the {Ordering} of {Events} in a {Distributed}
  {System},'' {\em Commun. ACM}, vol.~21, no.~7, pp.~558--565, 1978.

\bibitem{valgrind}
N.~Nethercote and J.~Seward, ``Valgrind: a {Framework} for {Heavyweight}
  {Dynamic} {Binary} {Instrumentation},'' in {\em PLDI}, pp.~89--100, 2007.

\bibitem{PIN}
C.-K. Luk, R.~S. Cohn, R.~Muth, H.~Patil, A.~Klauser, P.~G. Lowney, S.~Wallace,
  V.~J. Reddi, and K.~M. Hazelwood, ``Pin: {Building} {Customized} {Program}
  {Analysis} {Tools} with {Dynamic} {Instrumentation},'' in {\em PLDI},
  pp.~190--200, 2005.

\bibitem{tsan}
K.~Serebryany and T.~Iskhodzhanov, ``Thread{S}anitizer - data race detection in
  practice,'' 2009.

\bibitem{chess}
M.~Musuvathi, S.~Qadeer, T.~Ball, G.~Basler, P.~A. Nainar, and I.~Neamtiu,
  ``{Finding} and {Reproducing} {Heisenbugs} in {Concurrent} {Programs},'' in
  {\em OSDI} (R.~Draves and R.~van Renesse, eds.), pp.~267--280, USENIX
  Association, 2008.

\bibitem{Huang}
J.~Huang, P.~Liu, and C.~Zhang, ``{LEAP}: {Lightweight} {Deterministic}
  {Multi-processor} {Replay} of {Concurrent} {Java} {Programs},'' in {\em
  SIGSOFT FSE}, pp.~207--216, 2010.

\bibitem{DejaVu}
J.-D. Choi and H.~Srinivasan, ``{Deterministic} {Replay} of {Java}
  {Multithreaded} {Applications},'' in {\em Proceedings of the SIGMETRICS
  Symposium on Parallel and Distributed Tools}, pp.~48--59, 1998.

\bibitem{ODR}
G.~Altekar and I.~Stoica, ``{ODR}: {Output}-{Deterministic} {Replay} for
  {Multicore} {Debugging},'' in {\em SOSP}, pp.~193--206, 2009.

\bibitem{FunInt}
D.~S. Myers and A.~L. Bazinet, ``Intercepting {Arbitrary} {Functions} on
  {Windows}, {UNIX} and {Macintosh} {OS} {X} {Platforms},'' 2004.

\bibitem{detours}
G.~Hunt and D.~Brubacher, ``Detours: {Binary} {Interception} of {Win32}
  {Functions},'' 1999.

\bibitem{dining}
C.~A.~R. Hoare, ``Process {Algebra}: {A} {Unifying} {Approach},'' in {\em 25
  Years Communicating Sequential Processes}, pp.~36--60, 2004.

\end{thebibliography}
